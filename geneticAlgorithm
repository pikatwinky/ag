import random

def function(x):
    return (x-2)**2

def decode(b):
   return int(b,2)

def calcularFitness():
    for j in range(len(poblacion)):
        fitness[j] = function(decode(poblacion[j]))

def normalizar():
    fitnorm=fitness[:]
    for i in range(len(fitness)):
        fitnorm[i]/=max(fitness)
    return fitnorm

def probabilidad(n):
    p=fitness[n]/sum(fitness)
    return p

def ruleta():
    n=0
    sum=probabilidad(n)
    e=random.random()
    while sum<e:
        n+=1
        sum+=probabilidad(n)
    return n

def seleccion():
    padre1 = ruleta()
    padre2 = ruleta()
    alpha, beta=crossover(padre1, padre2)
    fitnessAlpha=function(decode(alpha))
    fitnessBeta = function(decode(beta))
    fitnessPadre1=fitness[padre1]
    fitnessPadre2 = fitness[padre2]

    if fitnessAlpha>fitnessPadre1:
        poblacion[padre1]=alpha
        if fitnessBeta>fitnessPadre2:
            poblacion[padre2]=beta
    elif fitnessBeta>fitnessPadre1:
         poblacion[padre1]=beta
         if fitnessAlpha>fitnessPadre2:
             poblacion[padre2] = alpha

def crossover(padre1, padre2):
    e=random.random()
    if e>pc:
        return poblacion[padre1],poblacion[padre2]
    else:
        alpha=''
        beta=''
        I=len(poblacion[padre1])
        epsilon=random.randint(0, I-2)
        m=[]
        for i in range(I):
            m.append(0)

        for i in range(epsilon+1, I):
            m[i]=1
        for j in range(I):
            if m[j]==1:
                alpha+=poblacion[padre2][j]
                beta+=poblacion[padre1][j]
            else:
                alpha+=poblacion[padre1][j]
                beta+=poblacion[padre2][j]

    return alpha,beta



poblacion=['000', '001', '010', '011', '100']
fitness=[0,0,0,0,0]
pc=0.9


g=0
while g<5:
#Mutar los descendientes
    calcularFitness()
    fitnessNorm=normalizar()
    g+=1
    seleccion()




